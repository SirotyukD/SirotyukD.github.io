1. Установим Gulp:
   npm i gulp -S

2. Создадим package.json для конфигурации Gulp:
   npm init

{
  "name": "test",
  "version": "1.0.0",
  "description": "",
  "author": "",
  "license": "ISC",
  "dependencies": {
    "browser-sync": "^2.2.3",
    "gulp": "latest",
    "gulp-autoprefixer": "^6.0.0",
    "gulp-clean-css": "latest",
    "gulp-imagemin": "^2.2.1",
    "gulp-sass": "latest",
    "gulp-sourcemaps": "^1.5.0",
    "gulp-uglify": "^1.1.0",
    "gulp-watch": "^4.1.1",
    "imagemin-pngquant": "^4.0.0",
    "gulp-concat": "^2.6.1",
    "main-bower-files": "^2.13.1",
    "rimraf": "^2.3.1"
  }
}

2.1 Запустим установку описанных расширений в объекте "dependecies":
    npm i

3. Организуем необходимую файловую структуру:
   для нас важны 2 папки: app  и  dist

4. Сконфигурируем gulpfile.js - файл с "тасками" (задачами) для Gulp:

   'use strict';

	var gulp = require('gulp'),
		mainBowerFiles = require('main-bower-files'),
		watch = require('gulp-watch'),
		prefixer = require('gulp-autoprefixer'),
		uglify = require('gulp-uglify'),
		sourcemaps = require('gulp-sourcemaps'),
		sass = require('gulp-sass'),
		cleanCSS = require('gulp-clean-css'),
		imagemin = require('gulp-imagemin'),
		pngquant = require('imagemin-pngquant'),
		rimraf = require('rimraf'),
		browserSync = require("browser-sync"),
		reload = browserSync.reload;




5. Создадим один общий объект с путями:

	var path = {
		vendor: {
			js: 'app/js/',
			css: 'app/css/'
		},
		dist: { //Тут мы укажем куда складывать готовые после сборки файлы
			html: 'dist/',
			js: 'dist/js/',
			scss: 'dist/css/',
			css: 'dist/css/',
			img: 'dist/img/',
			fonts: 'dist/fonts/'
		},
		app: { //Пути откуда брать исходники
			html: 'app/*.html', //Синтаксис src/*.html говорит gulp что мы хотим взять все файлы с расширением .html
			js: 'app/js/*.js',//В стилях и скриптах нам понадобятся только main файлы
			scss: 'app/css/*.scss',
			css: 'app/css/*.css',
			img: 'app/img/**/*.*', //Синтаксис img/**/*.* означает - взять все файлы всех расширений из папки и из вложенных каталогов
			fonts: 'app/fonts/**/*.*'
		},
		watch: { //Тут мы укажем, за изменением каких файлов мы хотим наблюдать
			html: 'app/**/*.html',
			js: 'app/js/**/*.js',
			scss: 'app/css/**/*.scss',
			css: 'app/css/**/*.css',
			img: 'app/img/**/*.*',
			fonts: 'app/fonts/**/*.*'
		},
		clean: './dist'
	};




6. Сконфигурируем наш веб-сервер:

var config = {
    server: {
        baseDir: "./dist"
    },
    tunnel: true,
    host: 'localhost',
    port: 8081,
    logPrefix: "SirotukD"
};




7. Напишем таски, которые помогут нам обработать файлы перед перемещением в /dist:

gulp.task('vendorJs:build', function () {
		return gulp.src( mainBowerFiles('**/*.js') ) //Выберем файлы по нужному пути
			.pipe(gulp.dest(path.vendor.js)) //Выплюнем готовый файл в app
	});

	gulp.task('vendorCss:build', function () {
		return gulp.src( mainBowerFiles('**/*.css') ) //Выберем файлы по нужному пути
			 .pipe(gulp.dest(path.vendor.css)) //И в app
	});

	gulp.task('html:build', function () {
		return gulp.src(path.app.html) //Выберем файлы по нужному пути
			.pipe(gulp.dest(path.dist.html)) //Выплюнем их в папку build
			.pipe(reload({stream: true})); //И перезагрузим наш сервер для обновлений
	});

	gulp.task('js:build', function () {
		return gulp.src(path.app.js) //Найдем наш main файл
			.pipe(sourcemaps.init()) //Инициализируем sourcemap
			.pipe(uglify()) //Сожмем наш js
			.pipe(sourcemaps.write()) //Пропишем карты
			.pipe(gulp.dest(path.dist.js)) //Выплюнем готовый файл в build
			.pipe(reload({stream: true})); //И перезагрузим сервер
	});

	gulp.task('scss:build', function () {
		return gulp.src(path.app.scss) //Выберем наш main.scss
			.pipe(sourcemaps.init()) //То же самое что и с js
			.pipe(sass()) //Скомпилируем
			.pipe(prefixer()) //Добавим вендорные префиксы
			.pipe(cleanCSS()) //Сожмем
			.pipe(sourcemaps.write())
			.pipe(gulp.dest(path.dist.scss)) //И в build
			.pipe(reload({stream: true}));
	});

	gulp.task('css:build', function () {
		return gulp.src(path.app.css) //Выберем наш main.css 'app/css/*.css'
			.pipe(sourcemaps.init()) //То же самое что и с js
			.pipe(gulp.dest(path.dist.css)) //И в build
			.pipe(reload({stream: true})); 
	});

	gulp.task('image:build', function () {
		return gulp.src(path.app.img) //Выберем наши картинки
			.pipe(imagemin({ //Сожмем их
				progressive: true,
				svgoPlugins: [{removeViewBox: false}],
				use: [pngquant()],
				interlaced: true
			}))
			.pipe(gulp.dest(path.dist.img)) //И бросим в build
			.pipe(reload({stream: true}));
	});

	gulp.task('fonts:build', function() {
		return gulp.src(path.app.fonts)
			.pipe(gulp.dest(path.dist.fonts))
	});

	gulp.task('clean', function (cb) {
    rimraf(path.clean, cb);
	});



8. Создадим общий таск с названием 'build', который будет запускать все написанное выше:

	gulp.task('build', gulp.series('clean', 'vendorCss:build', 'vendorJs:build', 'html:build', 'js:build', 'scss:build', 'css:build', 'fonts:build', //'image:build'
	));



9. Сделаем так, чтобы измения файлов в /app автоматически инициировали наши прописанные таски:

gulp.task('watch', function(){
				gulp.watch([path.watch.html], gulp.parallel('html:build'));
				gulp.watch([path.watch.css], gulp.parallel('css:build'));
				gulp.watch([path.watch.js], gulp.parallel('js:build'));
				gulp.watch([path.watch.img], gulp.parallel('image:build'));
				gulp.watch([path.watch.fonts], gulp.parallel('fonts:build'))
	});



10. Создадим локальный livereload-сервер:

gulp.task('webserver', function () {
    browserSync(config);
});



11. Таск для "подчистки мусора":

gulp.task('clean', function (cb) {
    rimraf(path.clean, cb);
});



12. В файле "bower.json" добавляем новый объект:

"overrides": {
    "bootstrap": {
        "main": [
            "./dist/js/bootstrap.min.js",
            "./dist/css/bootstrap.min.css"
            ]
    }
  },


13. УРА! Осталось одной строкой кода запустить наше чудесное детище Франкенштейна :)
    gulp.task('dev', gulp.series('build', gulp.parallel('watch', 'webserver')));
